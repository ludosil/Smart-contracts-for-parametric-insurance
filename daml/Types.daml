module Types where
import DA.Date
import DA.Time

type GPS = (Decimal, Decimal)
gpsIsValid : GPS -> Bool
gpsIsValid gps = 
    (fst gps) >= -90.0 &&
    (fst gps) < 90.0 && 
    (snd gps) >= -180.0 &&
    (snd gps) < 180.0

data ContractTrigger =
    AboveAtAnyTime with strike : Decimal |
    BelowAtAnyTime with strike : Decimal
    -- AboveFor       with strike : Decimal; periodInDays : Decimal |
    -- BelowFor       with strike : Decimal; periodInDays : Decimal
        deriving (Eq,Show)
 
data ParametricContractType = 
  WindSpeed | 
  RichterScale |
  WaterLevel |
  Temperature
    deriving (Eq, Show)

data InsurableEvent = InsurableEvent with
  pcType : ParametricContractType
  start : Time
  end : Time
  location : GPS
  premiumPer100 : Decimal
  trigger : ContractTrigger
    deriving (Eq, Show)

-- check type can be created
ieEarthquake = InsurableEvent with
    pcType = RichterScale
    start = time (date 2020 Jan 1) 0 0 0
    end = time (date 2020 Dec 31) 0 0 0
    location = (1.0, 1.0) : GPS
    premiumPer100 = 5.0
    trigger = AboveAtAnyTime 0.0

-- tds : Date -> Date -> [(Date, Decimal)]
tds : Date -> Date -> [(Date, Decimal)]
tds x y = [(x, 0.0)]
y = tds (date 2020 Jan 1) (date 2020 Dec 31)

t1 = date 2020 Jan 1

t2 = time (date 2020 Jan 1) 0 0 0

xs = [(1,2),(2,1),(3,1)]
ys = map (\(dt,val) -> val > 1) xs