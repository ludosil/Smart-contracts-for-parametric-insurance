module Main where

import Daml.Script
import Types
import DA.Date
import DA.Time

template InsurableEventProposal
    with
        proposer : Party
        approver : Party
        insEvt   : InsurableEvent
    where
        signatory proposer 
        observer approver
        ensure gpsIsValid insEvt.location
    
        controller approver can
            InsurableEventProposal_Approve : ContractId InsurableEventApproved
                with
                    observers : [Party]
                do
                    create InsurableEventApproved with
                        approver  = approver
                        observers = observers
                        insEvt    = insEvt

            InsurableEventProposal_Reject : ()
                do
                    pure()
      
template InsurableEventApproved
    with 
        approver  : Party
        observers : [Party]
        insEvt    : InsurableEvent
    where
        signatory approver
        observer observers

        controller approver can 
            AddObserver : ContractId InsurableEventApproved
                    with
                        observer : Party
                    do
                        create this with
                            observers = observers ++ [observer]

        nonconsuming choice ProposeInsuranceContract : ContractId InsuranceContractProposal
            with
                proposer : Party
                proposee : Party
                asBuyer  : Bool
                notional : Decimal -- should add premium here as well
            controller proposer
            do
                now <- getTime
                assertMsg 
                    "Cannot propose contract after event has started" 
                    (now < insEvt.start)
                create InsuranceContractProposal with
                    proposer = proposer
                    proposee = proposee
                    asBuyer  = asBuyer
                    insEvt   = insEvt
                    admin    = approver
                    notional = notional

template InsuranceContractProposal
    with
        proposer : Party
        proposee : Party
        asBuyer  : Bool
        insEvt   : InsurableEvent
        admin    : Party
        notional : Decimal
    where
        signatory proposer
        observer proposee, admin
        ensure proposer /= proposee

        controller proposee can 
            InsuranceContractProposal_Accept : ContractId InsuranceContractAgreement
                with
                    counterpart : Party

                do                    
                    create InsuranceContractAgreement with
                        buyer    = if asBuyer then counterpart else proposee
                        seller   = if asBuyer then proposee else counterpart
                        insEvt   = insEvt
                        admin    = admin
                        notional = notional

template InsuranceContractAgreement
    with
        buyer    : Party
        seller   : Party
        insEvt   : InsurableEvent
        admin    : Party
        notional : Decimal
    where
        signatory buyer, seller
        observer admin
        ensure 
            (buyer /= seller)

        controller admin can

            InsuranceContractAgreement_Approve : (ContractId InsuranceContractApproved, ContractId Balance, ContractId Balance)
                do
                    (bBalRef, bBal) <- fetchByKey @Balance (admin, buyer)
                    (sBalRef, sBal) <- fetchByKey @Balance (admin, seller)

                    let premium = (notional * insEvt.premiumPer100) / 100.0
                    assertMsg 
                        "Buyer does not have funds for premium"
                        (bBal.freeFunds > premium)
                    assertMsg 
                        "Seller does not have funds for notional, net of premium received"
                        (sBal.freeFunds + premium > notional)
                    
                    archive bBalRef
                    archive sBalRef
                    
                    bUpdate <- create Balance with
                        party       = buyer
                        admin       = admin
                        freeFunds   = bBal.freeFunds - premium
                        lockedFunds = bBal.lockedFunds
                    sUpdate <- create Balance with
                        party       = seller
                        admin       = admin
                        freeFunds   = sBal.freeFunds - notional + premium -- -premInLockedFund
                        -- logic missing here? e.g. 95 free + 5 for premium on 100 notional
                        -- ok while free funds cover the notional
                        -- but edge case to consider when premium needed as well
                        -- likely a min/max approach needed
                        -- e.g. premInLockedFund = max(0, notional - sBal.freeFunds)
                        lockedFunds = sBal.lockedFunds + notional -- +premInLockedFund
                    icApproved <- create InsuranceContractApproved with
                        buyer    = buyer
                        seller   = seller
                        insEvt   = insEvt
                        admin    = admin
                        notional = notional
                    return (icApproved, bUpdate, sUpdate)            

template InsuranceContractApproved
    with
        buyer    : Party
        seller   : Party
        insEvt   : InsurableEvent
        admin    : Party
        notional : Decimal
    where
        signatory admin, buyer, seller
        -- observer buyer, seller
        ensure 
            (buyer /= seller)

        controller admin can
            EvaluateContract : ContractId InsuranceContractPayout
                with
                    dataSource : [(Date, Decimal)]
                do
                    now <- getTime
                    assertMsg 
                        "Cannot evaluate before expiry" 
                        (now > insEvt.end)
                    let exercised : Bool = case insEvt.trigger of
                            AboveAtAnyTime strike -> any (\(dt,val) -> val > strike) dataSource
                            BelowAtAnyTime strike -> any (\(dt,val) -> val < strike) dataSource
                            -- AboveFor strike periodInDays -> (0.0, True)
                            -- BelowFor strike periodInDays -> (0.0, True)
                    create InsuranceContractPayout with
                        buyer     = buyer
                        seller    = seller
                        insEvt    = insEvt
                        admin     = admin
                        notional  = notional
                        exercised = exercised

template InsuranceContractPayout
    with
        buyer     : Party
        seller    : Party
        insEvt    : InsurableEvent
        admin     : Party
        notional  : Decimal
        exercised : Bool

    where 
        signatory admin, buyer, seller

        controller admin can 
            UpdateBalances : (ContractId Balance, ContractId Balance)
                do
                    (bBalRef, bBal) <- fetchByKey @Balance (admin, buyer)
                    (sBalRef, sBal) <- fetchByKey @Balance (admin, seller)

                    let premium = (notional * insEvt.premiumPer100) / 100.0

                    archive bBalRef
                    archive sBalRef
                    
                    bUpdate <- create Balance with
                        party       = buyer
                        admin       = admin
                        freeFunds   = if exercised then bBal.freeFunds + notional else bBal.freeFunds
                        lockedFunds = bBal.lockedFunds
                    sUpdate <- create Balance with
                        party       = seller
                        admin       = admin
                        freeFunds   = if not exercised then sBal.freeFunds + notional else sBal.freeFunds
                        lockedFunds = sBal.lockedFunds - notional --freed whatever happens
                    return (bUpdate, sUpdate)
  
template Balance
    with 
        party       : Party
        admin       : Party
        freeFunds   : Decimal
        lockedFunds : Decimal
    where
        signatory admin
        observer party
        
        key (admin, party) : (Party, Party)
        maintainer key._1

--  
setup : Script ()
setup = script do

    -- start on Dec 31 2021
    setTime $ time (date 2021 Dec 31) 00 00 00
    
    -- allocate admin and 3 parties
    admin           <- allocateParty "Admin"
    laResident      <- allocateParty "LA resident"
    manillaResident <- allocateParty "Manilla resident"
    insurer         <- allocateParty "Insurer"
    let observers = [laResident, manillaResident, insurer]

    -- admin creates balances
    balanceLA <- submit admin do
        createCmd Balance with
            party       = laResident
            admin       = admin
            freeFunds   = 1000.0
            lockedFunds = 0.0
    balanceManilla <- submit admin do
        createCmd Balance with
            party       = manillaResident
            admin       = admin
            freeFunds   = 1000.0
            lockedFunds = 0.0
    balanceInsurer <- submit admin do
        createCmd Balance with
            party       = insurer
            admin       = admin
            freeFunds   = 2000.0
            lockedFunds = 0.0

    -- make some proposals
    laQuakeEvtProposal <- submit laResident do
        createCmd InsurableEventProposal with
            proposer = laResident
            approver = admin
            insEvt   = InsurableEvent with
                pcType        = RichterScale
                start         = time (date 2022 Jan 1) 0 0 0
                end           = time (date 2023 Jan 1) 0 0 0
                location      = (34.052235, -118.243683) : GPS
                premiumPer100 = 5.0
                trigger       = AboveAtAnyTime 7.0

    manillaExtrHeatProposal <- submit manillaResident do
        createCmd InsurableEventProposal with
            proposer = manillaResident
            approver = admin
            insEvt   = InsurableEvent with
                pcType        = Temperature
                start         = time (date 2022 Sep 1) 0 0 0
                end           = time (date 2022 Nov 1) 0 0 0
                location      = (14.599512, 120.984222) : GPS
                premiumPer100 = 5.0
                trigger       = AboveAtAnyTime 38.0
    
    defaultProposal <- submit laResident do
        createCmd InsurableEventProposal with
            proposer = laResident
            approver = admin
            insEvt   = InsurableEvent with
                pcType        = Temperature
                start         = time (date 2020 Jan 1) 0 0 0
                end           = time (date 2020 Dec 31) 0 0 0
                location      = (0.0, 0.0) : GPS
                premiumPer100 = 0.0
                trigger       = AboveAtAnyTime 0.0

    -- 2 are accepted by the admin, the default proposal is rejected
    laQuakeEvtApproval <- submit admin do
        exerciseCmd laQuakeEvtProposal InsurableEventProposal_Approve with 
            observers = observers

    manillaExtrHeatEvtApproval <- submit admin do
        exerciseCmd manillaExtrHeatProposal InsurableEventProposal_Approve with
            observers = observers

    submit admin do
        exerciseCmd defaultProposal InsurableEventProposal_Reject

    -- an insurance contract is proposed on each of the 2 approved events
    -- each party is looking for cover of 1500
    laQuakeContractProposal <- submit laResident do
        exerciseCmd laQuakeEvtApproval ProposeInsuranceContract with 
            proposer = laResident; proposee = insurer; asBuyer = True; notional = 1500.0
    manillaExtrHeatContractProposal <- submit manillaResident do
        exerciseCmd manillaExtrHeatEvtApproval ProposeInsuranceContract with 
            proposer = manillaResident; proposee = insurer; asBuyer = True; notional = 1500.0
        
    -- both contracts are agreed
    laQuakeContractAcceptance <- submit insurer do
        exerciseCmd laQuakeContractProposal InsuranceContractProposal_Accept with 
            counterpart = laResident
    manillaExtrHeatContractAcceptance <- submit insurer do
        exerciseCmd manillaExtrHeatContractProposal InsuranceContractProposal_Accept with 
            counterpart = manillaResident
    
    -- but only the first contract can be accepted
    -- since the contract locks up 1500 of the insurer's capital (less the premium)
    -- this isn't sufficient to write the second contract
    (laQuakeContractApproval, _, _) <- submit admin do
        exerciseCmd laQuakeContractAcceptance InsuranceContractAgreement_Approve
    submitMustFail admin do
        exerciseCmd manillaExtrHeatContractAcceptance InsuranceContractAgreement_Approve

    -- proxy the trusted data source
    -- max readings on richter scale per month
    let laRichter2022 = [(date 2022 Jan 31, 3.3),
                         (date 2022 Feb 28, 3.1),
                         (date 2022 Mar 31, 4.0),
                         (date 2022 Apr 30, 2.8),
                         (date 2022 May 31, 3.0),
                         (date 2022 Jun 30, 3.3),
                         (date 2022 Jul 31, 3.9),
                         (date 2022 Aug 31, 4.2),
                         (date 2022 Sep 30, 4.5),
                         (date 2022 Oct 31, 5.5),
                         (date 2022 Nov 30, 4.2),
                         (date 2022 Dec 31, 3.3)] : [(Date, Decimal)]
    
    -- the contract cannot be evaluated while the expiry has not passed
    submitMustFail admin do
        exerciseCmd laQuakeContractApproval EvaluateContract with
            dataSource = laRichter2022

    -- roll forward to Jan 2 2023 and the contract can be evaluated
    passTime (days 367)
    laQuakeContractEval <- submit admin do
        exerciseCmd laQuakeContractApproval EvaluateContract with
            dataSource = laRichter2022

    -- update the balances
    -- the contract should payout if any of the richter values exceed 7.0
    submit admin do
        exerciseCmd laQuakeContractEval UpdateBalances
      
    pure()
