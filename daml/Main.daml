module Main where

import Daml.Script
import Types
import DA.Date

template InsuranceEventProposal
    with
        proposer : Party
        approver : Party
        insEvt   : InsuranceEvent
    where
        signatory proposer 
        observer approver
    
        controller approver can
            InsuranceEventProposal_Approve : ContractId InsuranceEventApproval
                with
                    observers : [Party]
                do
                    create InsuranceEventApproval with
                        approver = approver
                        observers = observers
                        insEvt = insEvt

            InsuranceEventProposal_Reject : ()
                do
                    pure()
      
template InsuranceEventApproval
    with 
        approver  : Party
        observers : [Party]
        insEvt    : InsuranceEvent
    where
        signatory approver
        observer observers

        nonconsuming choice ProposeInsuranceContract : ContractId InsuranceContractProposal
            with
                proposer : Party
                proposee : Party
            controller proposer
            do
                create InsuranceContractProposal with
                    proposer = proposer
                    proposee = proposee
                    insEvt = insEvt

template InsuranceContractProposal
    with
        proposer : Party
        proposee : Party
        insEvt   : InsuranceEvent
    where
        signatory proposer
        observer proposee

        controller proposee can 
            InsuranceContractProposal_Accept : ContractId InsuranceContractAgreement
                with
                    party1 : Party
                    party2 : Party
                do
                    create InsuranceContractAgreement with
                        party1 = party2
                        party2 = party2
                        insEvt = insEvt

template InsuranceContractAgreement
    with
        party1 : Party
        party2 : Party
        insEvt   : InsuranceEvent
    where
        signatory party1, party2
        
template InsuranceContractPayout
    with
        admin        : Party
        exercised    : Bool
        party1Payout : Decimal
        party2Payout : Decimal
    where 
        signatory admin

template TrustedDataSource
    with
        admin      : Party
        dataStream : [(Date, Decimal)]
    where
        signatory admin

        controller admin can
            ApplyDataToEvaluateContract : ContractId InsuranceContractPayout
                do
                    -- code to feed data stream to trigger function
                    create InsuranceContractPayout with
                        admin = admin
                        exercised = True
                        party1Payout = 0.0
                        party2Payout = 0.0


  
setup : Script ()
setup = script do

    -- allocate admin and 3 buyers/sellers
    admin <- allocateParty "Admin"
    p1 <- allocateParty "P1"
    p2 <- allocateParty "P2"
    p3 <- allocateParty "P3"
    let observers = [p1, p2, p3]

    -- each buyer/seller proposes an insurance event proposal
    prop1 <- submit p1 do
        createCmd InsuranceEventProposal with
            proposer = p1
            approver = admin
            insEvt = InsuranceEvent with
                pcType = WindSpeed
                start = date 2020 Jan 1
                end = date 2020 Dec 31
                location = (0.0, 0.0) : GPS
                trigger = AboveAtAnyTime 100.0


    prop2 <- submit p2 do
        createCmd InsuranceEventProposal with
            proposer = p2
            approver = admin
            insEvt = InsuranceEvent with
                pcType = RichterScale
                start = date 2020 Jan 1
                end = date 2020 Dec 31
                location = (0.0, 0.0) : GPS
                trigger = AboveAtAnyTime 7.0
    
    prop3 <- submit p3 do
        createCmd InsuranceEventProposal with
            proposer = p3
            approver = admin
            insEvt = InsuranceEvent with
                pcType = Temperature
                start = date 2020 Jan 1
                end = date 2020 Dec 31
                location = (0.0, 0.0) : GPS
                trigger = AboveAtAnyTime 45.0

    -- 2 are accepted, 1 is rejected
    approve1 <- submit admin do
        exerciseCmd prop1 InsuranceEventProposal_Approve with observers = observers

    approve2 <- submit admin do
        exerciseCmd prop2 InsuranceEventProposal_Approve with observers = observers    

    submit admin do
        exerciseCmd prop3 InsuranceEventProposal_Reject

    -- for the 2 accepted events, an insurance contract is proposed
    propIC1 <- submit p1 do
        exerciseCmd approve1 ProposeInsuranceContract with proposer = p1; proposee = p2
    propIC2 <- submit p2 do
        exerciseCmd approve1 ProposeInsuranceContract with proposer = p2; proposee = p3
        
    -- the proposed contract is agreed    
    acceptIC1 <- submit p2 do
        exerciseCmd propIC1 InsuranceContractProposal_Accept with party1 = p1; party2 = p2
    
    -- create a data source
    let windSpeed = [(date 2020 Jan 31, 0.0), (date 2020 Dec 31, 0.0)] : [(Date, Decimal)] 
    windSpeedDataSource <- submit admin do
        createCmd TrustedDataSource with
            admin = admin
            dataStream = windSpeed

    -- apply data source to evaluate contract
    evaluateIC1 <- submit admin do
        exerciseCmd windSpeedDataSource ApplyDataToEvaluateContract

    pure()
